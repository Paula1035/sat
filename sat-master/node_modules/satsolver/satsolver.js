exports.solve = function (fileName) {
  let formula = readFormula(fileName)
  let result = doSolve(formula.clauses, formula.variables)
  return result // two fields: isSat and satisfyingAssignment
}

function s (fileName){
    let formula = readFormula(fileName)
  let result = doSolve(formula.clauses, formula.variables)
  return result
}

console.log(s('simple2.cnf'))
// Receives the current assignment and produces the next one
function nextAssignment(currentAssignment) {
  let a = 1
  while (a <= currentAssignment.length && currentAssignment[currentAssignment.length - a]){
 
    currentAssignment[currentAssignment.length - a] = false
    a++
}
  currentAssignment[currentAssignment.length - a] = true
  return currentAssignment
}



function doSolve(clauses, assignment) {
  let isSat = false
  while ((!isSat)) {
    // does this assignment satisfy the formula? If so, make isSat true. 
    isSat = true
    for(let i = 0; i < clauses.length; i++){
        let aux = false
        let aux2 = false
        for(let j = 0; j < clauses.length; j++){
            if (clauses[i][j] < 0){
              aux = !assignment[Math.abs(clauses[i][j]) - 1] 
           }
           else {
              aux = assignment[Math.abs(clauses[i][j]) - 1] 
           }
           aux = aux || aux2
           aux2 = aux
        }
        isSat = isSat && aux
    }

    // if not, get the next assignment and try again. 
    if (isSat == false) { assignment = nextAssignment(assignment)}
  }
  let result = {'isSat': isSat, satisfyingAssignment: null}
  if (isSat) {
    result.satisfyingAssignment = assignment
  }
  return result
}
  
function readFormula(fileName) {
  // To read the file, it is possible to use the 'fs' module. 
  // Use function readFileSync and not readFile. 
  // First read the lines of text of the file and only afterward use the auxiliary functions.

  let ler = require("fs")

  let arquivo = ler.readFileSync(fileName, "utf8")

  

  let text = arquivo.split("\n")// = ...  //  an array containing lines of text extracted from the file. 
  let clauses = readClauses(text)
  let variables = readVariables(clauses)
  
  
  // In the following line, text is passed as an argument so that the function
  // is able to extract the problem specification.
  let specOk = checkProblemSpecification(text, clauses, variables)

  let result = { 'clauses': [], 'variables': [] }
  if (specOk) {
    result.clauses = clauses
    result.variables = variables
  }
  return result
}

function readClauses (text){

    let cont = 0
    let clausarray = []
    let arrayaux = []

    while(cont < text.length){
        if(text[cont][0] != "p" && text[cont][0] != "c" && text[cont].length > 0){
            let cont2 = 0
            
            while(cont2 < text[cont].length){
                if(text[cont][cont2] != " ") {
                    let aa = ""
                    for(var i = cont2; i < text[cont].length && text[cont][i] != " "; i++){
                        aa += text[cont][i]
                    }
                    arrayaux[arrayaux.length] = aa
                    cont2 = i
                }

                cont2++
            }

            if(arrayaux[arrayaux.length - 1] == "0"){
                arrayaux.pop()
                clausarray[clausarray.length] = arrayaux
                arrayaux = []
            }
        }
        cont += 1
    }

    return clausarray
}

function readVariables (clauses){
    let falses = []

    for(let i = 0; i < clauses.length; i++){
        for(let j = 0; j < clauses.length; j++){
            let a = Math.abs(clauses[i][j] - '0') - 1
            falses[a] = false
        }
    }

    return falses
}

function checkProblemSpecification (text, clauses, variables){

    let cont = 0
    let cont2 = 0

    while(cont < text.length){
        if(text[cont][0] == "p"){
            if (text[cont].includes(variables.length + " " + clauses.length)) {
                return true
            } else {
                return false
            }
        }
        else if(cont == text.length - 1){
            return true
        }
        cont += 1 
    }

   
}

